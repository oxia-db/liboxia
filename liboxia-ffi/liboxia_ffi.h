#include <stdint.h>

#ifndef liboxia_ffi_H
#define liboxia_ffi_H

/* WARNING: DO NOT EDIT. This file is automatically generated by cbindgen. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

enum COxiaError {
  Ok = 0,
  TransportError = 1,
  GrpcStatus = 2,
  UnexpectedStatus = 3,
  ShardLeaderNotFound = 4,
  KeyLeaderNotFound = 5,
  KeyNotFound = 6,
  UnexpectedVersionId = 7,
  SessionDoesNotExist = 8,
  InternalRetryable = 9,
};
typedef int32_t COxiaError;

typedef struct OxiaClient OxiaClient;

typedef struct COxiaClientOptions {
  const char *service_address;
  const char *namespace_;
} COxiaClientOptions;

typedef struct COxiaPutResult {
  char *key;
  int64_t version_id;
} COxiaPutResult;

typedef struct COxiaGetResult {
  char *key;
  uint8_t *value;
  uintptr_t value_len;
  int64_t version_id;
} COxiaGetResult;

COxiaError oxia_client_new(struct COxiaClientOptions options, struct OxiaClient **client_ptr);

void oxia_client_free(struct OxiaClient *client);

COxiaError oxia_client_put(struct OxiaClient *client,
                           const char *key,
                           const uint8_t *value,
                           uintptr_t value_len,
                           struct COxiaPutResult **result_ptr);

COxiaError oxia_client_get(struct OxiaClient *client,
                           const char *key,
                           struct COxiaGetResult **result_ptr);

COxiaError oxia_client_shutdown(struct OxiaClient *client);

void oxia_put_result_free(struct COxiaPutResult *result);

void oxia_get_result_free(struct COxiaGetResult *result);

#endif  /* liboxia_ffi_H */
